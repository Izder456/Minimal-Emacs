<p><strong>OCaml</strong> has been on my radar for some years now, and I think it was
<a rel="noopener" target="_blank" href="https://mirage.io">MirageOS</a> which sparked my interest in the language. Lately, I started
reading more about OCaml and its ecosystem, and indulged myself in an
historical detour.</p>
<p>For more background information on Caml and the <strong>Caml Light</strong> implementation
in particular, please refer to &quot;<a rel="noopener" target="_blank" href="https://caml.inria.fr/about/history.en.html">A History of Caml</a>&quot;. Distribution
archives for Caml Light are available <a rel="noopener" target="_blank" href="https://caml.inria.fr/pub/distrib/Oldies/">here</a>.</p>
<p>The oldest DOS version available on Inria site is Caml Light 0.6, and I
was able to find Caml Light 0.5 on the <a rel="noopener" target="_blank" href="https://en.wikipedia.org/wiki/Simtel">Simtel</a> archives. The recovered
files are available <a href="/files/caml/">here</a>, along with documentation for the 0.6 version.</p>
<p>Here is an ANSI logo tribute which was drawn especially for this post:</p>
<p><img src="/content/2023/09/caml-light.gif" alt="Caml Light" title="Caml Light" /></p>
<p>Caml Light is implemented as a <strong>bytecode compiler</strong> which made it highly
portable. It is possible to create executables using the <strong>CAMLC.EXE</strong> command,
but please be aware that the resulting binaries are not standalone when using
the default linking mode, and the runtime system (<strong>CAMLRUN.EXE</strong>) is required
to run them.</p>
<p>The latest available release of Caml Light for DOS is version 0.7 released
in 1995.</p>
<p>Compared with the UNIX version, one of the drawbacks is that it is not
possible to interface with C functions.
Another one is that we cannot use Ctrl+D to send the <em>EOT</em> character to quit
the REPL, one should type <em>quit();;</em> instead to invoke the quit system
function to get back to the DOS command interpreter.</p>
<p>On the plus side, the DOS version supports graphics primitives using the
<a rel="noopener" target="_blank" href="https://en.wikipedia.org/wiki/Borland_Graphics_Interface">Borland Graphics Interface</a> <strong>CGA.BGI</strong> driver for CGA graphic cards, or
<strong>EGAVGA.BGI</strong> for EGA and VGA cards.</p>
<p>The development environment can be bootstrapped as follows:</p>
<pre style="background-color:#272822;color:#f8f8f2;"><code><span>mkdir -p ~/dos/caml386
</span><span>cd ~/dos/caml386
</span><span>wget https://caml.inria.fr/pub/distrib/Oldies/cl7pcbin.zip
</span><span>unzip cl7pcbin.zip
</span></code></pre>
<p>When using <strong>FreeDOS</strong>, we need to add the following in <em>FDAUTO.BAT</em>:</p>
<pre style="background-color:#272822;color:#f8f8f2;"><code><span>set PATH=c:\caml386\bin;%PATH%
</span><span>set CAMLLIB=c:\caml386\lib
</span><span>set GO32TMP=c:\tmp
</span></code></pre>
<p>Alternatively, when using <strong>DOSBox</strong> instead, we need the following in
<em>dosbox.conf</em>:</p>
<pre style="background-color:#272822;color:#f8f8f2;"><code><span>[autoexec]
</span><span>mount c ~/dos
</span><span>path=c:\caml386\bin
</span><span>set CAMLLIB=c:\caml386\lib
</span><span>set GO32TMP=c:\tmp
</span><span>set GO32=driver c:\caml386\dev\vesa_s3.grd gw 800 gh 600
</span><span>c:
</span></code></pre>
<p>The last configuration line is optional and only required for using the
graphics primitives. DOSBox emulates an <strong>S3 Trio64</strong> by default, so we need
to use the <em>VESA_S3.GRD</em> driver.</p>
<p>Once we are done installing, this gives us Caml Light 0.7:</p>
<pre style="background-color:#272822;color:#f8f8f2;"><code><span>C:\&gt;camlc -v
</span><span>The Caml Light system for the 80386 PC, version 0.7
</span><span>  (standard library from c:\caml386\lib)
</span><span>The Caml Light runtime system, version 0.7
</span><span>The Caml Light compiler, version 0.7
</span><span>The Caml Light linker, version 0.7
</span></code></pre>
<p>We can then start playing with the example programs bundled with the Caml
Light distribution.</p>
<p>This is a screenshot from the &quot;Color Wheel&quot; program:</p>
<p><img src="/content/2023/09/colwheel.png" alt="Caml Light - Color Wheel" title="Caml Light - Color Wheel" /></p>
<p>Another program showing graphics animation of sorting algorithms:</p>
<p><img src="/content/2023/09/showsort.png" alt="Caml Light - Showsort" title="Caml Light - Showsort" /></p>
<p>And finally the interactive &quot;Spirals&quot; program:</p>
<p><img src="/content/2023/09/spirals.png" alt="Caml Light - Spirals" title="Caml Light - Spirals" /></p>
<p>For the more adventurous reader, there also was a user contributed <a rel="noopener" target="_blank" href="https://caml.inria.fr/pub/distrib/Usercontribs/ocaml-1.00-msdos.exe">DOS port
of OCaml 1.00</a>. Have fun!</p>
