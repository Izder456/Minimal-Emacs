<p>This is the fifth post in my toolchains adventures series. Please check
the previous posts in the <a rel="noopener" target="_blank" href="https://www.cambus.net/categories/toolchains/">toolchains</a> category for more context about
this journey.</p>
<p>In Pkgsrc land, I updated mold to the <a rel="noopener" target="_blank" href="https://freshbsd.org/netbsd/pkgsrc/commit/FSZoy5Z3mdMmDjAD">1.2</a>, <a rel="noopener" target="_blank" href="https://freshbsd.org/netbsd/pkgsrc/commit/1cAXEc80W80QW3CD">1.2.1</a>, and <a rel="noopener" target="_blank" href="https://freshbsd.org/netbsd/pkgsrc/commit/Iegiqqk02trIRwID">1.3</a>
versions, and pax-utils to the <a rel="noopener" target="_blank" href="https://freshbsd.org/netbsd/pkgsrc/commit/wcgzZiFbBhdkcABD">1.3.4</a> one.
I also added a z3 option to our <a rel="noopener" target="_blank" href="https://freshbsd.org/netbsd/pkgsrc/commit/xP1pGKheDOhqSCHD">llvm</a> and <a rel="noopener" target="_blank" href="https://freshbsd.org/netbsd/pkgsrc/commit/Ur5ax14JahyeTCHD">clang</a> packages to allow
building them against the <a rel="noopener" target="_blank" href="https://github.com/Z3Prover/z3">Z3 theorem prover</a>. When both <a rel="noopener" target="_blank" href="https://pkgsrc.se/lang/llvm">lang/llvm</a>
and <a rel="noopener" target="_blank" href="https://pkgsrc.se/lang/clang">lang/clang</a> are built with the z3 option enabled, the Z3 constraint
solver is activated for the Clang static analyzer. This option is not
enabled by default. I wrote a blog post showing <a rel="noopener" target="_blank" href="https://www.cambus.net/clang-static-analyzer-and-the-z3-constraint-solver/">how to use Z3</a> as an
external solver and to do refutation to filter out false positives.</p>
<p>While I mention static analysis, I've been extremely impressed with the
progress of the <a rel="noopener" target="_blank" href="https://gcc.gnu.org/onlinedocs/gcc-12.1.0/gcc/Static-Analyzer-Options.html">GCC's static analysis</a> framework. It was introduced in
GCC 10, and a major rewrite occurred in GCC 11. It now generates significantly
less false positives, and found some valid memory leaks on error paths in
<a rel="noopener" target="_blank" href="https://github.com/ansilove/libansilove/releases/tag/1.3.0">libansilove 1.30</a>, which the Clang static analyzer didn't catch.</p>
<p>Regarding the NetBSD base system, I started evaluating what it would take
to upstream our local binutils patches. The version we have in NetBSD's src
repository is <a rel="noopener" target="_blank" href="https://lists.gnu.org/archive/html/info-gnu/2020-02/msg00000.html">binutils 2.34</a> (released in February 2020), and diffing
our tree with the release tarball results in a 4310 lines diff, touching
163 files with 1404 insertions and 186 deletions.</p>
<p>For each of these changes, we need to dig into version control history to
find why they were needed in the first place, verify if they are still
needed, and if so potentially rework them to meet upstream coding standards.
This requires an understanding of the problem domain to be able to explain
the rationale behind the changes while submitting patches and writing
relevant commit messages.</p>
<p>While some of those patches are NetBSD specific, we still need to ensure
we are not breaking other operating systems. Ultimately, vanilla binutils
should be able to produce working binaries on NetBSD without requiring any
local patches. Once this goal is reached, we need to ensure it keeps
building, investigate test suite failures, and setup buildbots for
continuous builds on key architectures.</p>
<p>On the LLVM side, I managed to do a couple of commits as well to add
<code>libclang_rt.profile{{.*}}.a</code> tests for both OpenBSD and NetBSD in the
Clang driver test suite.</p>
<p>Lastly, I also wrote a couple of blog posts about various topics:</p>
<ul>
<li><a rel="noopener" target="_blank" href="https://www.cambus.net/assembly-instructions-distribution/">Assembly instructions distribution</a></li>
<li><a rel="noopener" target="_blank" href="https://www.cambus.net/differences-between-base-and-ports-llvm-in-openbsd/">Differences between base and ports LLVM in OpenBSD</a></li>
<li><a rel="noopener" target="_blank" href="https://www.cambus.net/clang-static-analyzer-and-the-z3-constraint-solver/">Clang Static Analyzer and the Z3 constraint solver</a></li>
</ul>
<p>That's all for now, happy Summer 2022 everyone!</p>
<p>LLVM commits:</p>
<table><thead><tr><th></th><th></th><th></th></tr></thead><tbody>
<tr><td>2022-06-27</td><td><a rel="noopener" target="_blank" href="https://github.com/llvm/llvm-project/commit/aa89bb3435e0abe6e80eac9d1ac43aaf5e04d1c8">aa89bb3</a></td><td>[Driver][test] Add libclang_rt.profile{{.*}}.a tests for NetBSD</td></tr>
<tr><td>2022-06-26</td><td><a rel="noopener" target="_blank" href="https://github.com/llvm/llvm-project/commit/2ff4fb6573c111265a9d4d445f5cf43b659e71eb">2ff4fb6</a></td><td>[Driver][test] Add libclang_rt.profile{{.*}}.a tests for OpenBSD</td></tr>
<tr><td>2022-06-24</td><td><a rel="noopener" target="_blank" href="https://github.com/llvm/llvm-project/commit/a129a371610dc342402dcdd122330369b25ff247">a129a37</a></td><td>[clang] Update Clang version from 14 to 15 in scan-build.1</td></tr>
</tbody></table>
